#+TITLE: Emacs - Language Server Protocol

* Introduction
http://maskray.me/blog/2017-12-03-c++-language-server-cquery

https://github.com/emacs-lsp/lsp-mode
* C++
=cquery=[fn:1] provides an complete LSP for C/C++/Object-C, including a LSP server and a LSP client (which depends on =lsp-mode=). =cquery= can be installed and configured following a procedure as below.
** Installation
*** =cquery=
**** Prerequisite
#+BEGIN_SRC sh
pacman -S clang llvm
#+END_SRC
**** Build
#+BEGIN_SRC sh
git clone https://github.com/jacobdufault/cquery --recursive
cd cquery
python waf configure --prefix /opt/cquery --use-system-clang
python waf build
python waf install
ln -s /opt/cquery/bin/cquery /usr/local/bin
mkdir ~/.emacs.d/cquery
cp emacs/cquery.el ~/.emacs.d/cquery
#+END_SRC
*** =lsp-mode=
=lsp-mode= can be easily installed via ELPA.
** Configuration
Add following entries into =~/.emacs.d/init.el=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/cquery")
(require 'cquery)
(add-hook 'c-mode-common-hook 'lsp-cquery-enable)
(setq cquery-cache-dir "/tmp/cquery_cache")
#+END_SRC
With LSP, two company backends, =company-semantic= and =company-clang= can be removed if used before.
#+BEGIN_SRC emacs-lisp
(setq company-backends (delete 'company-semantic company-backends))
(setq company-backends (delete 'company-clang company-backends))
#+END_SRC
** Usage
*** =compile_commands.json=
In the normal utilization of LSP, a compilation database is required[fn:6], i.e., =compile_commands.json=. It can be generated by a variety of tools, e.g., =cmake=[fn:2], =build ear=[fn:3], =ninja=[fn:4], =waf=[fn:5], etc.

Taking =build ear= for instance, which can be installed by
#+BEGIN_SRC sh
pacman -S bear
#+END_SRC
a =compile_commands.json= can be generated by compiling the target project, e.g.
#+BEGIN_SRC sh
bear make -j
#+END_SRC
*** Provision
By default, the LSP client uses =company-capf= for completion, which is a company backend. Therefore, function =company-complete= can list the candidates for completion offered by LSP.
 | Key binding | Function                |
 |-------------+-------------------------|
 | =M-.=       | =xref-find-definitions= |
 | =M-,=       | =xref-pop-marker-stack= |
 | =C-M-i=     | =complete-symbol=       |
 | =C-M-.=     | =xref-find-apropos=     |
* Footnotes

[fn:7] http://maskray.me/blog/2017-12-03-c++-language-server-cquery

[fn:6] https://sarcasm.github.io/notes/dev/compilation-database.html

[fn:5] https://waf.io/

[fn:4] https://ninja-build.org/

[fn:3] https://github.com/rizsotto/Bear

[fn:2] https://cmake.org/

[fn:1] https://github.com/jacobdufault/cquery
