#+TITLE: Python - Basic

* IPython
IPython是一个加强版的Python解释器。
- 没有内建到Python自身中的IPython特殊命令称为魔术命令，可以看作是IPython系统内部的命令行程序。魔术命令的前缀符号是百分号 =%= 。使用魔术命令也可以不加百分号，只要没有变量被定义与魔术函数名字相同即可。这种特性称为自动魔术，通过 =%automagic= 进行启动禁用。
| 命令                       | 描述                                                               |
|----------------------------+--------------------------------------------------------------------|
| =%quickref=                | 显示IPython快速参考卡。                                            |
| =%magic=                   | 显示所有可用魔术命令的详细文档。                                   |
| =%debug=                   | 从最后发生报错的底部进入交互式调试器。                             |
| =%hist=                    | 打印历史命令输入。                                                 |
| =%pdb=                     | 出现任意报错后自动进入调试器。                                     |
| =%paste=                   | 从剪贴板中执行已经预先格式化的Python代码。                         |
| =%cpaste=                  | 打开一个特殊提示符，手动粘贴待执行的Python代码。                   |
| =%reset=                   | 删除交互式命名空间中所有的变量、名称。                             |
| =%page OBJECT=             | 通过分页器更美观地打印显示一个对象。                               |
| =%run SCRIPT.py=           | 在IPython中运行一个Python脚本。                                    |
| =%prun STATEMENT=          | 使用 =CProfile= 执行语句，并报告输出。                             |
| =%time STATEMENT=          | 报告单个语句的执行时间。                                           |
| =%timeit STATEMENT=        | 多次运行单个语句计算平均执行时间（在估算代码最短执行时间时有用）。 |
| =%who=, =%who_ls=, =%whos= | 根据不同的详细程度，展示交互命名空间中定义的变量。                 |
| =%xdel VARIABLE=           | 在IPython内部删除一个变量，清除相关的引用。                        |
- 在IPython会话中，可以使用 =%run= 命令运行任意的Python文件。IPython会在同一个进程内执行指定文件中的代码，确保在执行完成时可以立即得到结果。如果一个Python脚本需要命令行提供参数（通过 =sys.argv= 获得），那么则需要在命令行的文件路径后面加上参数进行传递。如果想让运行的脚本使用交互式IPython命名空间中已有的变量，需要使用 =%run -i= 替代 =%run= 。
- =%paste= 会获得剪贴板中的所有文本，并作为代码块在命令行中执行； =%cpaste= 与之类似，只不过它会给出一个特殊的提示符提示粘贴代码。
- =%matplotlib= 魔术函数可以设置matplotlib与IPython命令行或Jupyter notebook的集成。
- 在任意代码运行时按下 =Ctrl-C= ，无论脚本是通过 =%run= 或是其他长命令运行的，都将引起 =KeyboardInterrupt= ，导致所有的Python程序立即停止运行（某些特殊情况除外）。
- IPython中大多数Python对象会被格式化为更可读、更美观的形式。
- IPython还提供执行任意代码块（通过复制粘贴）和整个Python脚步的功能。
- 在一个变量名的前后使用问号(=?=)可以显示一些关于该对象的概要信息。使用双问号(=??=) 可以显示函数的源代码。 =?= 可以像Unix命令行一样搜索IPython命名空间。把一些字符和通配符(=*=)结合在一起，会显示所有匹配通配符表达式的命令。

需要启动Jupyter时，可以在终端中运行如下命令。
#+BEGIN_SRC python
  jupyter notebook
#+END_SRC
在很多平台上，Jupyter会自动默认网络浏览器（除非启动Jupyter时使用了 =--no-browser= 命令）。
* Python语法
** 基础
Python采用缩进（tab或者空格）来组织代码，而不是像其他语言（如C++、R、Java和Perl）那样采用大括号。一个冒号代表一个缩进的开始，单个代码块中所有的代码必须保持相同的缩进，知道代码块结束。Python不需要以分号结尾，但是可以用于分隔一行内的多条语句。

Python语言的一个重要特征就是对象模型的一致性。每一个数值、字符串、数据结构、函数、类、模块以及所有存在于Python解释器中的事物，都是Python对象。每个对象都会关联到一种类型（例如字符串、函数）和内部数据。

所有写在 =#= 之后的文本都会被Python解释器自动忽略。因此，通常使用 =#= 在代码中添加注释。

几乎所有的Python对象都有内部函数，称为方法，可以访问到对象内部的内容。

在Python中，赋值也称为绑定，因为赋值操作会把一个变量名绑定到一个对象上，被赋值变量名也称为被绑定变量。对一个变量（或者变量名）赋值，本质就是创建一个指向等号右边对象的引用。当把一个对象作为参数传给一个函数时，指向原始对象的新的本地变量就会被创建而无须复制。可以使用关键字 =is= 和 =is not= 检查两个引用是否指向同一个对象或不同对象。值得注意的是，函数 =list= 总是创建一个新的Python列表（即一份拷贝）。

与C++、Java等大多数编译型语言不同，Python中的对象引用并不涉及类型。变量对于对象来说只是特定命名空间中的名称，类型信息是存储在对象自身里的。可以使用函数 =isinstance= 来检查一个对象是否是特定类型的实例，该函数可以接受一个包含类型的元组作为参数，用于检查对象的类型是否在元组中的类型中。如：
#+BEGIN_SRC python
  isinstance(a, int)
  isinstance(a, (int, float))
#+END_SRC

在Python中，模块就是以 =.py= 为后缀名并包含Python代码的文件。
** 基本类型
Python中的大部分对象，如列表、字典、 =Numpy= 数组都是可变对象，大多数用户定义的类型（类）也是可变的。可变对象中包含的对象和值是可以被修改的。但是有一些对象是不可变的，如字符串、元组。

Python的标准库中有一个小的内建类型集合，用来处理数值、字符串、布尔值以及日期和时间。这类“单值”类型被称为标量。主要的标量类型有 =None=[fn:1]、 =str= 、 =bytes= 、 =float=[fn:2] 、 =bool= 、 =int=[fn:3] 等。

整数除法会把结果自动转型为浮点数。如果需要C风格的整数除法（去掉小数部分），可以使用整除操作符 =//= 。
*** 字符串
字符串是Unicode字符的序列。可以使用单引号 ='= 或双引号 ="= 写一个字符串字面值。对于含有换行的多行字符串，可以使用三个单引号（ ='''= ）或三个双引号（ ="""= ）。另外，值得注意的是，字符串是不可改变的。很多Python对象可以通过函数 =str= 转成字符串。反斜杠 =\= 是转移符号，它用来指明特殊符号。可以在字符串前面加上前缀符号 =r= （raw的简写）避免对字符串转义。字符串对象有一个 =format= 方法，可以用来代替字符串中的格式化参数，并产生一个新的字符串。
*** 日期和时间
Python内建的 =datetime= 模块提供了 =datetime= ， =date= 和 =time= 类型。
- 对于 =datetime= 实例，可以分别使用 =date= 和 =time= 方法获取它的 =date= 和 =time= 对象。
- =strftime= 方法可以将 =datetime= 转换为字符串。格式化说明见下表。
- =strptime= 函数可以将字符串转换为 =datetime= 对象。
- =datetime.datetime= 是不可变类型。
- 两个不同的 =datetime= 对象可以产生一个 =datetime.timedelta= 对象。
| 类型 | 描述                                               |
|------+----------------------------------------------------|
| %Y   | 四位数年份                                         |
| %y   | 两位数年份                                         |
| %m   | 两位数月份[01, 12]                                 |
| %d   | 两位数的天数[01, 31]                               |
| %H   | 小时（24小时制）[00, 23]                           |
| %I   | 小时（12小时制）[01, 12]                           |
| %M   | 两位数分钟[00, 59]                                 |
| %S   | 秒                                                 |
| %w   | 星期[0, 6]                                         |
| %U   | 一年中的第几个星期值（星期天是每周第一天）[00, 53] |
| %W   | 一年中的第几个星期值（星期一是每周第一天）[00, 53] |
| %z   | UTC时区偏移值                                      |
| %F   | %Y-%m-%d的简写                                     |
| %D   | %m/%d/%y的简写                                        |
** 控制流
- 一个 =if= 语句可以接多个 =elif= 代码块和一个 =else= 代码块。如果某个条件为 =True= ，则后面的 =elif= 和 =else= 代码块不会执行。当使用 =and= 和 =or= 进行混合条件判断时，条件判断是从左到右执行的，而且在 =and= 和 =or= 两侧的条件会有短路现象。
- =for= 循环用于遍历一个集合（如列表或元组）或一个迭代器。使用关键字 =continue= 可以跳出本次循环（跳过其后面的代码）进入下一次循环。关键字 =break= 可以跳出整个 =for= 循环。对于多重循环， =break= 只能跳出最内层的 =for= 循环，外层的其他 =for= 循环会继续执行。
- =while= 循环会在条件符合时一直执行代码块，知道判断条件为 =False= 或显式地通过关键字 =break= 跳出循环。
- =pass= 表示不执行任何操作。
- =range= 函数返回一个迭代器，该迭代器生成一个等差整数序列。产生的整数包含起始但不包含结尾。
- Python的三元表达式可以将一个 =if-else=  联合起来，在一行代码或一个语句中生成数据。其语法为：
#+begin_src python
  value = true-expression if condition else false-expression
#+end_src
其结果与如下代码块的结果相同：
#+begin_src python
  if condition:
      value = true-expression
  else:
      value = false-expression
#+end_src
* Footnotes

[fn:3]可以存储任意大小数字。 

[fn:2]双精度64位数值。 

[fn:1]Python的 =null= 值，只存在一个实例。 如果一个函数没有显式的返回值，则它会隐式地返回 =None= 。它不仅是一个关键字，还是 =NoneType= 类型的唯一实例。
